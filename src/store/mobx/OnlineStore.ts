// src/stores/OnlineStore.ts
import { makeAutoObservable, runInAction } from 'mobx';
import { AppState, AppStateStatus } from 'react-native';
import { connectSocket } from '../../helpers/http/socket';
import { BaseStore, StoreListener } from './BaseStore';
import { RootStore } from '../rootStore';
import { UnreadStatus } from '../../types/chat';
import { MessageDTO } from '../../types';

export type OnlineUser = { userId: string; isOnline: boolean };

export class OnlineStore {
  private readonly baseStore = new BaseStore();
  readonly subscribe: (listener: StoreListener) => () => void;
  private root: RootStore;

  onlineUsers: OnlineUser[] = [];
  socket: any = null;
  isConnected = false;
  isConnecting = false;               // NEW
  appState: AppStateStatus = AppState.currentState;

  typingUsers: { userId: string; userName: string }[] = [];
  isSubscribed = false;

  hasUserNotification = false;
  hasUserNewMessage = false;
  hasUnreadGroup = false;
  hasUnreadPrivate = false;
  hasUnreadBot = false;

  currentRoutName: string = "";

  /** –∫–æ–º–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∂–æ–π–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∫–æ–Ω–Ω–µ–∫—Ç–∞/—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞ */
  private pendingRooms = new Set<string>();    // NEW

  constructor(root: RootStore) {
    this.root = root;
    this.subscribe = this.baseStore.subscribe;
    makeAutoObservable(this, {
      baseStore: false,
      subscribe: false,
      notify: false,
      root: false,
    } as any);
    AppState.addEventListener('change', this.handleAppStateChange);
  }

  private notify() {
    this.baseStore.notify();
  }

  get snapshotVersion() {
    return this.baseStore.snapshotVersion;
  }

  setCurrentRoutName = (value: string) => {
    runInAction(() => { this.currentRoutName = value; });
  }

  handleAppStateChange = async (nextAppState: AppStateStatus) => {
    if (this.appState === 'active' && nextAppState.match(/inactive|background/)) {
      console.log('‚õî App is going to background or inactive');
      // –ú–æ–∂–Ω–æ –ù–ï –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–∏—Ç—å –Ω–∞ iOS, –Ω–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –æ—Å—Ç–∞–≤—å:
      // this.disconnectSocket();
    }

    if (this.appState.match(/inactive|background/) && nextAppState === 'active') {
      console.log('üöÄ App is active');
      await this.connectSocket();        // –¥–æ–∂–¥—ë–º—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      this.flushPendingJoins();          // –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –∫–æ–º–Ω–∞—Ç—ã
    }

    this.appState = nextAppState;
  }

  /** –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ 'connect' (–∏–ª–∏ –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã) */
  private waitForConnect(): Promise<void> {    // NEW
    if (this.socket?.connected && this.isConnected) return Promise.resolve();
    return new Promise((resolve) => {
      const onConnect = () => {
        this.socket?.off?.('connect', onConnect);
        resolve();
      };
      this.socket?.on?.('connect', onConnect);
    });
  }

  /** –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É (–∏ —É–º–µ–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è) */
  async connectSocket() {
    if (this.isConnected && this.socket?.connected) return;
    if (this.isConnecting) {
      await this.waitForConnect();
      return;
    }

    const userId = this.root.authStore.getMyId();
    if (!userId) return;

    this.isConnecting = true;

    // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–º
    if (this.socket && !this.socket.connected) {
      this.socket.connect();
      await this.waitForConnect();
      runInAction(() => { this.isConnected = true; this.isConnecting = false; });
      this.afterConnect(userId);
      return;
    }

    // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º —Å–æ–∫–µ—Ç
    this.socket = connectSocket(userId);

    this.socket.on('connect', () => {
      runInAction(() => { this.isConnected = true; this.isConnecting = false; });
      this.afterConnect(userId);
    });

    this.socket.on('reconnect', () => {        // NEW: auto re-join
      runInAction(() => { this.isConnected = true; });
      this.afterConnect(userId);
    });

    this.socket.on('disconnect', (_reason: any) => {
      runInAction(() => {
        this.isConnected = false;
        this.onlineUsers = [];
      });
    });

    // –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏—è
    this.registerSocketEvents();

    // –¥–æ–∂–¥—ë–º—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await this.waitForConnect().catch(() => { });
  }

  /** –î–µ–π—Å—Ç–≤–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ connect/reconnect */
  private afterConnect(userId: string) {       // NEW
    this.socket?.emit?.('online', userId);
    this.flushPendingJoins();
  }

  /** –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ joinChats */
  private flushPendingJoins() {                // NEW
    if (!this.socket?.connected || !this.pendingRooms.size) return;
    const rooms = Array.from(this.pendingRooms);
    this.socket.emit('joinChats', rooms);
    this.pendingRooms.clear();
  }

  async ensureConnectedAndJoined(chatsId: string[]) {
    if (chatsId?.length) {
      chatsId.forEach(id => this.pendingRooms.add(id));
    }
    await this.connectSocket();   // –¥–æ–∂–¥—ë–º—Å—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ 'connect'
    this.flushPendingJoins();     // —Å—Ä–∞–∑—É –¥–æ–∂–º—ë–º join
  }

  disconnectSocket() {
    const userId = this.root.authStore.getMyId();
    try {
      if (this.socket && userId) {
        this.socket.emit('offline', userId);
        this.removeSocketEvents();
        this.socket.disconnect();
      }
    } finally {
      runInAction(() => {
        this.isConnected = false;
        this.isConnecting = false;
        this.onlineUsers = [];
        this.socket = null;
      });
    }
  }

  registerSocketEvents() {
    if (!this.socket) return;
    this.socket.on('get-users', this.setOnlineUsers);
    this.socket.on("server-message:newNotification", () => this.setUserNotification(true));
    this.socket.on("server-message:newMessage", this.handleNewMessageForTab);
  }

  removeSocketEvents() {
    if (!this.socket) return;
    this.socket.off('get-users', this.setOnlineUsers);
    this.socket.off("server-message:newNotification");
    this.socket.off("server-message:newMessage");
  }

  setOnlineUsers = (users: OnlineUser[]) => {
    runInAction(() => {
      this.onlineUsers = users;
      this.typingUsers = this.typingUsers.filter(u =>
        users.some(s => s.userId === u.userId && s.isOnline)
      );
    });
  };

  setUserNotification = (value: boolean) => {
    runInAction(() => { this.hasUserNotification = value; });
  }

  setUnreadStatus = (status: UnreadStatus) => {
    runInAction(() => {
      this.hasUserNewMessage = status.hasUnread;
      this.hasUnreadGroup = status.group;
      this.hasUnreadPrivate = status.private;
      this.hasUnreadBot = status.bot;
    });
  }

  setHasUnreadGroup = (value: boolean) => {
    runInAction(() => {
      this.hasUnreadGroup = value;
      this.hasUserNewMessage = this.hasUnreadGroup || this.hasUnreadPrivate || this.hasUnreadBot;
    });
  }

  setHasUnreadPrivate = (value: boolean) => {
    runInAction(() => {
      this.hasUnreadPrivate = value;
      this.hasUserNewMessage = this.hasUnreadGroup || this.hasUnreadPrivate || this.hasUnreadBot;
    });
  }

  setHasUnreadBot = (value: boolean) => {
    runInAction(() => {
      this.hasUnreadBot = value;
      this.hasUserNewMessage = this.hasUnreadGroup || this.hasUnreadPrivate || this.hasUnreadBot;
    });
  }

  handleNewMessageForTab = (typeMessage: 'newPrivateMessage' | 'newGroupMessage' | 'newBotMessage') => {
    // NB: –∏–º—è —Ä–æ—É—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–º
    if (this.currentRoutName === "chatMessages") {  // FIX: –±—ã–ª–æ "chatScreen"
      return;
    }
    runInAction(() => {
      this.hasUserNewMessage = true;
      if (typeMessage === 'newGroupMessage') this.hasUnreadGroup = true;
      if (typeMessage === 'newPrivateMessage') this.hasUnreadPrivate = true;
      if (typeMessage === 'newBotMessage') this.hasUnreadBot = true;
    });
  }

  setUserNewMessage = (value: boolean) => {
    runInAction(() => { this.hasUserNewMessage = value; });
  }

  getIsUserOnline(userId: string) {
    return this.onlineUsers.some(user => user.userId === userId);
  }

  handleTyping = (data: { userId: string; userName: string }) => {
    runInAction(() => { this.setTypingStatus(data.userId, data.userName, true); });
  };
  handleStopTyping = (userId: string) => {
    runInAction(() => { this.setTypingStatus(userId, "", false); });
  };

  setTypingStatus(userId: string, userName: string, isTyping: boolean) {
    runInAction(() => {
      if (isTyping) {
        if (!this.typingUsers.some(u => u.userId === userId)) {
          this.typingUsers.push({ userId, userName });
        }
      } else {
        this.typingUsers = this.typingUsers.filter(u => u.userId !== userId);
      }
    });
  }

  getTypingUsers() { return this.typingUsers; }

  emitTyping(chatId: string) {
    if (!this.socket?.connected) return;
    this.socket.emit("typing", {
      room: chatId,
      userId: this.root.authStore.getMyId(),
      userName: this.root.authStore.user?.fullName,
    });
  }

  emitStopTyping(chatId: string) {
    if (!this.socket?.connected) return;
    this.socket.emit("stop typing", {
      room: chatId,
      userId: this.root.authStore.getMyId(),
    });
  }

  emitEditedMessage(message: MessageDTO) {
    if (!this.socket?.connected) return;
    this.socket.emit('editedMessage', message);
  }

  emitWasReaded({ chatId, messageId }: { chatId: string, messageId: string }) {
    if (!this.socket?.connected) return;
    this.socket.emit("message:read", {
      chatId, messageId, senderId: this.root.authStore.getMyId(),
    });
  }

  /** –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π join: —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ pending –∏ —à–ª—ë–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã */
  emitJoinChats(chatsId: string[]) {
    if (!chatsId?.length) return;
    chatsId.forEach(id => this.pendingRooms.add(id));
    if (this.socket?.connected) {
      this.flushPendingJoins();
    }
  }
}

